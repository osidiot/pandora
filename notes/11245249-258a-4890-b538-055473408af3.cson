createdAt: "2021-07-24T13:13:34.926Z"
updatedAt: "2021-07-25T07:44:56.383Z"
type: "MARKDOWN_NOTE"
folder: "d46437f1ddb58b8126d2"
title: "mremap实现分析"
tags: []
content: '''
  ## mremap实现分析
  
  mremap用于扩大/缩小/移动指定的内存映射。
  
  ### flags检查
  
  mremap当前支持3个flags：
  ```
  #define MREMAP_MAYMOVE		1
  #define MREMAP_FIXED		2
  #define MREMAP_DONTUNMAP	4
  ```
  简单的说：`MREMAP_MAYMOVE`表示位置可以移动；`MREMAP_FIXED`表示移动到指定位置；`MREMAP_DONTUNMAP`表示移动位置并且老位置不释放（老位置映射关系会清零）。
  
  最详细、权威的信息请看man mremap中的解释。
  
  mremap首先会对传入的flags进行检查：
  
  ```
  	if (flags & ~(MREMAP_FIXED | MREMAP_MAYMOVE | MREMAP_DONTUNMAP))
  		return ret;
  
  	if (flags & MREMAP_FIXED && !(flags & MREMAP_MAYMOVE))
  		return ret;
  
  	/*
  	 * MREMAP_DONTUNMAP is always a move and it does not allow resizing
  	 * in the process.
  	 */
  	if (flags & MREMAP_DONTUNMAP &&
  			(!(flags & MREMAP_MAYMOVE) || old_len != new_len))
  		return ret;
  ```
  - L1-2：flags当前只支持上述3种标志，其他bits当前不支持
  - L4-5：MREMAP_FIXED必须依赖MREMAP_MAYMOVE
  - L11-12：MREMAP_DONTUNMAP要求：(a)MREMAP_MAYMOVE 并且 (b)映射大小不变
  
  ### 场景一：设置了MREMAP_FIXED或MREMAP_DONTUNMAP
  仅移动位置有以下几种flags组合：
  1. MREMAP_MAYMOVE
  2. MREMAP_FIXED + MREMAP_MAYMOVE
  3. MREMAP_FIXED + MREMAP_DONTUNMAP + MREMAP_MAYMOVE
  4. MREMAP_DONTUNMAP + MREMAP_MAYMOVE
  即必须设置`MREMAP_MAYMOVE`。
  
  
  ```
  SYSCALL_DEFINE5(mremap, unsigned long, addr, unsigned long, old_len,
  		unsigned long, new_len, unsigned long, flags,
  		unsigned long, new_addr)
  {
    ...
  	if (flags & (MREMAP_FIXED | MREMAP_DONTUNMAP)) {
  		ret = mremap_to(addr, old_len, new_addr, new_len,
  				&locked, flags, &uf, &uf_unmap_early,
  				&uf_unmap);
  		goto out;
  	}
    ...
  }
  ```
  这两个flag都意味着设置了`MREMAP_MAYMOVE`，
  ```
  static unsigned long mremap_to(unsigned long addr, unsigned long old_len,
  		unsigned long new_addr, unsigned long new_len, bool *locked,
  		unsigned long flags, struct vm_userfaultfd_ctx *uf,
  		struct list_head *uf_unmap_early,
  		struct list_head *uf_unmap)
  {
    ...
    
    /*
     * TASK_SIZE是虚拟地址空间中内核部分与用户部分的分界线。
     * 此处判断新位置是否超过了用户部分的上限。
     * /
  	if (new_len > TASK_SIZE || new_addr > TASK_SIZE - new_len)
  		goto out;
  
    /*
     * 判断新位置和老位置是否有重合，不允许有重合部分。
     */
  	/* Ensure the old/new locations do not overlap */
  	if (addr + old_len > new_addr && new_addr + new_len > addr)
  		goto out;
      
    ...
  
    /*
     * 如果`MREMAP_FIXED`，必须确保新位置是空闲的。如果此前新位置已有
     * 映射，则会被unmap掉。
     */
  	if (flags & MREMAP_FIXED) {
  		ret = do_munmap(mm, new_addr, new_len, uf_unmap_early);
  		if (ret)
  			goto out;
  	}
  
    ...
  
    /*
     * 如果是要缩小映射区间，则现在老区间的基础上，将多余部分先unmap掉。
     */
  	if (old_len >= new_len) {
  		ret = do_munmap(mm, addr+new_len, old_len - new_len, uf_unmap);
  		if (ret && old_len != new_len)
  			goto out;
      /*
       * 当多余部分释放成功后，后面我们就相当于“不改变大小，仅移动位置”来处理了
       */
  		old_len = new_len;
  	}
    
    ...
    
    /*
     * 找到我们需要调整的vma，`vma_to_resize`中有多种判断逻辑，后文单独分析。
     */
    vma = vma_to_resize(addr, old_len, new_len, flags, &charged);
  	if (IS_ERR(vma)) {
  		ret = PTR_ERR(vma);
  		goto out;
  	}
    
    ...
    
    /*
     * `MREMAP_DONTUNMAP`会分配一段新区间并且不会从VM空间中将老区间释放，所以
     * 需要检查一下当前是否还允许扩展。
     * 要扩展的空间大小是old_len（`MREMAP_DONTUNMAP`要求之一是：大小不变）
     */
    /* MREMAP_DONTUNMAP expands by old_len since old_len == new_len */
  	if (flags & MREMAP_DONTUNMAP &&
  		!may_expand_vm(mm, vma->vm_flags, old_len >> PAGE_SHIFT)) {
  		ret = -ENOMEM;
  		goto out;
  	}
    
    ...
    
    /*
     * 以下操作为获取新位置new_addr
     */
    if (flags & MREMAP_FIXED)
  		map_flags |= MAP_FIXED;
  
  	if (vma->vm_flags & VM_MAYSHARE)
  		map_flags |= MAP_SHARED;
  
  	ret = get_unmapped_area(vma->vm_file, new_addr, new_len, vma->vm_pgoff +
  				((addr - vma->vm_start) >> PAGE_SHIFT),
  				map_flags);
  	if (IS_ERR_VALUE(ret))
  		goto out1;
  
  	/* We got a new mapping */
  	if (!(flags & MREMAP_FIXED))
  		new_addr = ret;
    
    ...
    
    /*
     * 移动vma，`move_vma`后文单独分析。
     * 注意，此时new_len>=old_len的。
     */
    ret = move_vma(vma, addr, old_len, new_len, new_addr, locked, flags, uf,
  		       uf_unmap);
    
    ...
  }
  ```
  
  下面分析`vma_to_resize`的实现：
  ```
  static struct vm_area_struct *vma_to_resize(unsigned long addr,
  	unsigned long old_len, unsigned long new_len, unsigned long flags,
  	unsigned long *p)
  {
    struct mm_struct *mm = current->mm;
    /*
     * addr是老地址，找到其对应的vma(仅仅是第一个满足vma->vm_end > addr的vma)
     */
  	struct vm_area_struct *vma = find_vma(mm, addr);
    ...
  
    /*
     * vma为空表示addr过大，vma->vm_start > addr 表示addr过小。这两种情况都说明在
     * 当前进程vm空间中addr根本没有映射过。
     */
  	if (!vma || vma->vm_start > addr)
  		return ERR_PTR(-EFAULT);
    
    /*
     * 目前，允许可以EXPAND的、非PFNMAP的vma进行`MREMAP_DONTUNMAP`。
     * 
     * 为什么会有这个约束？
     *   当前大家定的约束而已。MREMAP_DONTUNMAP是为满足ChromeOS和Android JVM新垃
     *   圾回收机制而引入的，最初只能是anon mapping才能DONTUNMAP，但是后来为了支持
     *   memfd场景（貌似Android JVM会涉及），所以放宽了条件。
     *   如果有合理的场景能够说服社区，那么条件可以进一步放宽，例如去除PFNMAP？
     */
  	if ((flags & MREMAP_DONTUNMAP) &&
  			(vma->vm_flags & (VM_DONTEXPAND | VM_PFNMAP)))
  		return ERR_PTR(-EINVAL);
  
    /*
     * 当前`vma_to_resize`调用的条件是（1）进行移动 或（2）进行扩展 的情况。但是当前
     * mremap不支持对hugetlb进行移动、扩展操作，也没有什么原因，最开始合入的时候就加了
     * 此约束。
     * 
     * 但是社区有这方面的诉求：
     *   1. (https://lkml.org/lkml/2017/10/20/859)
     *   2. (https://lkml.org/lkml/2011/11/3/358) 提供了patch
     */
  	if (is_vm_hugetlb_page(vma))
  		return ERR_PTR(-EINVAL);
    
    ...
  }
  ```
  
  
  
  #### optin2：只有MREMAP_MAYMOVE
  
  
'''
linesHighlighted: []
isStarred: false
isTrashed: false
