createdAt: "2020-05-04T08:18:29.503Z"
updatedAt: "2020-05-05T11:25:52.500Z"
type: "MARKDOWN_NOTE"
folder: "d46437f1ddb58b8126d2"
title: "linux实时调度分析"
tags: []
content: '''
  ## linux实时调度分析
  
  ### 实时进程优先级
  ```
  /*
   * Priority of a process goes from 0..MAX_PRIO-1, valid RT
   * priority is 0..MAX_RT_PRIO-1, and SCHED_NORMAL/SCHED_BATCH
   * tasks are in the range MAX_RT_PRIO..MAX_PRIO-1. Priority
   * values are inverted: lower p->prio value means higher priority.
   *
   * The MAX_USER_RT_PRIO value allows the actual maximum
   * RT priority to be separate from the value exported to
   * user-space.  This allows kernel threads to set their
   * priority to a value higher than any user task. Note:
   * MAX_RT_PRIO must not be smaller than MAX_USER_RT_PRIO.
   */
  
  #define MAX_USER_RT_PRIO        100
  #define MAX_RT_PRIO             MAX_USER_RT_PRIO
  
  #define MAX_PRIO                (MAX_RT_PRIO + NICE_WIDTH)
  #define DEFAULT_PRIO            (MAX_RT_PRIO + NICE_WIDTH / 2)
  ```
  根据上述代码可知：Linux系统中实时进程的优先级是`0...99`，并且`数值越低，实际优先级越高`。
  
  系统中还有一个`cpuri`，在实时进程调度中有用：
  ```
  #define CPUPRI_NR_PRIORITIES    (MAX_RT_PRIO + 2)
  
  #define CPUPRI_INVALID          -1
  #define CPUPRI_IDLE              0
  #define CPUPRI_NORMAL            1
  /* values 2-101 are RT priorities 0-99 */
  ```
  cpuri总共有102个有效值（-1是invalid的），RT优先级0...99对应cpuri的2...101。
  
  
  ### 关键数据结构
  
  ![RT关键数据结构关系](:storage/rt.png)
  
  ####  struct sched_rt_entity
  ```
  struct sched_rt_entity {                                
          struct list_head                run_list;       
          unsigned long                   timeout;        
          unsigned long                   watchdog_stamp; 
          unsigned int                    time_slice;     
          unsigned short                  on_rq;          
          unsigned short                  on_list;        
                                                          
          struct sched_rt_entity          *back;          
  #ifdef CONFIG_RT_GROUP_SCHED                            
          struct sched_rt_entity          *parent;        
          /* rq on which this entity is (to be) queued: */
          struct rt_rq                    *rt_rq;         
          /* rq "owned" by this entity/group: */          
          struct rt_rq                    *my_q;          
  #endif                                                  
  } __randomize_layout;                                   
  ```
  每个rt_rq（除root rt_rq之外）都对应、每个task_struct中都含有一个此结构体，用于记录RT相关的信息。
  ##### run_list
  链表结点，用来链接到此RT entity的优先级所对应的优先级链表中。
  每个RT entity应该是隶属于某一个rt_rq的，而每个rt_rq都含有一套优先级链表`active.queue`,每个激活的RT entity都应该通过`run_list`链接到对应的链表上。
  
  注意项：
  
  - **代表rt_rq的RT entity也会根据优先级添加到相应链表上**，可以从`enqueue_rt_entity`实现中得出此结论：
  ```
  static void enqueue_rt_entity(struct sched_rt_entity *rt_se, unsigned int flags)
  {
          ...
          for_each_sched_rt_entity(rt_se)
                  __enqueue_rt_entity(rt_se, flags);
          enqueue_top_rt_rq(&rq->rt);
  }
  ```
  入参`rt_se`代表某个task的RT entity。当enqueue时，会自下而上，逐级将对应的RT entity添加到相应优先级的queue中。（由于最顶层rt_rq没有RT entity，所以它需要`enqueue_top_rt_rq`特殊处理）
  
  - **rt_rq的优先级是由其孩子（包括rt_rq、tasks）中最高优先级决定的**，可以从`rt_se_prio`得出此几轮：
  ```
  static inline int rt_se_prio(struct sched_rt_entity *rt_se)
  {
  #ifdef CONFIG_RT_GROUP_SCHED
          struct rt_rq *rt_rq = group_rt_rq(rt_se);
  
          if (rt_rq)
                  return rt_rq->highest_prio.curr;
  #endif
  
          return rt_task_of(rt_se)->prio;
  }
  ```
  如果代表task，则直接返回task_struct中的`prio`；如果代表rt_rq，则返回此队列的孩子中最高优先级。（`highest_prio`分析见下文）
  
  ##### timeout、watchdog_stamp
  这两项与posix timer、rlimit相关，暂且忽略...
  
  ##### time_slice
  对于SCHED_RR类实时进程有用，表示一个时间片的大小，默认是100ms：
  ```
  int sched_rr_timeslice = RR_TIMESLICE;
  
  /*
   * default timeslice is 100 msecs (used only for SCHED_RR tasks).
   * Timeslices get refilled after they expire.
   */
  #define RR_TIMESLICE            (100 * HZ / 1000)
  ```
  可以通过`kernel.sched_rr_timeslice_ms`来修改它。
  
  设置时机：
  
  - 在fork时：
  ```
  static void __sched_fork(unsigned long clone_flags, struct task_struct *p)
  {
          ...
          p->rt.time_slice        = sched_rr_timeslice;
          ...
  }
  ```
  - sched tick到期时，递减，如果减至0则重新初始化：
  ```
  /*
   * scheduler tick hitting a task of our scheduling class.
   *
   * NOTE: This function can be called remotely by the tick offload that
   * goes along full dynticks. Therefore no local assumption can be made
   * and everything must be accessed through the @rq and @curr passed in
   * parameters.
   */
  static void task_tick_rt(struct rq *rq, struct task_struct *p, int queued)
  {
          ...
          if (--p->rt.time_slice)
                  return;
  
          p->rt.time_slice = sched_rr_timeslice;
          ...
  }
  ```
  
  ##### on_rq
  表示RT entity是否在某个rt_rq上。
  
  - 当RT entity加入队列时，置1：
  ```
  static void __enqueue_rt_entity(struct sched_rt_entity *rt_se, unsigned int flags)
  {
          ...
          rt_se->on_rq = 1;
          ...
  }
  ```
  - 当RT entity从队列中移除时，清0：
  ```
  static void __dequeue_rt_entity(struct sched_rt_entity *rt_se, unsigned int flags)
  {
          ...
          rt_se->on_rq = 0;
          ...
  }
  ```
  
  ##### on_list
  表示RT entity是否在某条优先级链表上。
  
  - 当RT entity加入队列时，置1：
  ```
  static void __enqueue_rt_entity(struct sched_rt_entity *rt_se, unsigned int flags)
  {
          ...
                  rt_se->on_list = 1;
          ...
  }
  ```
  
  - 当RT entity从队列中移除时，清0：
  ```
  __dequeue_rt_entity --> __delist_rt_entity
  
  static void __delist_rt_entity(struct sched_rt_entity *rt_se, struct rt_prio_array *array)
  {
          ...
          rt_se->on_list = 0;
  }
  ```
  
  ##### back
  没什么实际作用，可以看作是临时变量。
  在RT entity组成的树形结构中，每个非叶子节点（代表rt_rq）可能会有一到多个孩子，但如果从某个叶子节点（代表task）开始向上遍历，则只能由一条路径（`for_each_sched_rt_entity`）。`back`用来记录这条路径上此RT entity的孩子。
  
  ##### parent
  在RT entity组成的树形结构中，表示此RT entity的父节点。当前它只在`init_tg_rt_entry`中设置，而以下情况会调用此函数：
  
  - 系统初始化sched子系统时（`sched_init`），会初始化最顶层的rt_rq，而最顶层的rt_rq是没有RT entity的，所以这种场景不涉及parent。
  - 创建cpu cgroup的时候（`alloc_rt_sched_group`），会建立相应的层级结构。
  
  ##### rt_rq
  指向此RT entity所位于的那个rt_rq。
  
  ##### my_q
  如果此RT entity代表task，则my_q是NULL。
  如果此RT entity代表rt_rq，则my_q指向该rt_rq。
  
  #### struct rt_rq
  ```
  /* Real-Time classes' related field in a runqueue: */
  struct rt_rq {
          struct rt_prio_array    active;
          unsigned int            rt_nr_running;
          unsigned int            rr_nr_running;
  #if defined CONFIG_SMP || defined CONFIG_RT_GROUP_SCHED
          struct {
                  int             curr; /* highest queued rt task prio */
  #ifdef CONFIG_SMP
                  int             next; /* next highest */
  #endif
          } highest_prio;
  #endif
  #ifdef CONFIG_SMP
          unsigned long           rt_nr_migratory;
          unsigned long           rt_nr_total;
          int                     overloaded;
          struct plist_head       pushable_tasks;
  
  #endif /* CONFIG_SMP */
          int                     rt_queued;
  
          int                     rt_throttled;
          u64                     rt_time;
          u64                     rt_runtime;
          /* Nests inside the rq lock: */
          raw_spinlock_t          rt_runtime_lock;
  
  #ifdef CONFIG_RT_GROUP_SCHED
          unsigned long           rt_nr_boosted;
  
          struct rq               *rq;
          struct task_group       *tg;
  #endif
  };
  ```
  
  ##### highest_prio
  包含两个元素：
  
  - curr：此rt_rq中tasks中最高的优先级
  当enqueue RT entity时，会更新`curr`。
  ```
  __enqueue_rt_entity --> inc_rt_tasks --> inc_rt_prio
  
  static void
  inc_rt_prio(struct rt_rq *rt_rq, int prio)
  {
          int prev_prio = rt_rq->highest_prio.curr;
  
          if (prio < prev_prio)
                  rt_rq->highest_prio.curr = prio;
          ...
  }
  ```
  如果新加入到此rt_rq中的RT entity的优先级高于当前记录的，则更新。**注意，上面判断条件第一眼看到有点懵逼、以为写反了，后面反应过来：`prio`数值越小则优先级越高**。
  
  - next：此rt_rq中tasks中第二高的优先级
  
  ##### rt_time
  此rt_rq上的任务累计运行的时间。
  
  ##### rt_runtime
  此rt_rq允许运行的时长。
  
  - 系统初始化时设置root rt_rq的：
  `sched_init`中会设置全局的、默认的RT bindwidth：
  ```
  init_rt_bandwidth(&def_rt_bandwidth, global_rt_period(), global_rt_runtime());
  
  static inline u64 global_rt_period(void)
  {
          return (u64)sysctl_sched_rt_period * NSEC_PER_USEC;
  }
  
  static inline u64 global_rt_runtime(void)
  {
          if (sysctl_sched_rt_runtime < 0)
                  return RUNTIME_INF;
  
          return (u64)sysctl_sched_rt_runtime * NSEC_PER_USEC;
  }
  ```
  在这之后，每个cpu上最顶层的rt_rq的rt_runtime都将初始化成`def_rt_bandwidth.rt_runtime`：
  ```
  rq->rt.rt_runtime = def_rt_bandwidth.rt_runtime;
  ```
  
  `sched_init`中也会设置`root_task_group.rt_bandwidth`：
  ```
          init_rt_bandwidth(&root_task_group.rt_bandwidth,
                          global_rt_period(), global_rt_runtime());
  ```
  
  
  - 新创建的cpu cgroup，对应rt_rq rt_runtime的值为0：
  ```
  int alloc_rt_sched_group(struct task_group *tg, struct task_group *parent)
  {
          ...
          init_rt_bandwidth(&tg->rt_bandwidth,
                          ktime_to_ns(def_rt_bandwidth.rt_period), 0);
  
          for_each_possible_cpu(i) {
                  ...
                  rt_rq->rt_runtime = tg->rt_bandwidth.rt_runtime;
                  ...
          }
  }
  ```
  `init_rt_bandwidth`第三个入参代表runtime，所以`tg->rt_bandwidth.rt_runtime`被设置为0。接下来会用该值来依次设置此group所有的rt_rq->rt_runtime。
  下面是一个例子：
  ```
  [root@localhost cpu]# mkdir abc
  [root@localhost cpu]# cd abc/
  [root@localhost abc]# cat cpu.rt_runtime_us
  0
  [root@localhost abc]# cat cpu.rt_period_us
  1000000
  ```
  
  #### struct rt_prio_array
  
  ```
  /*
   * This is the priority-queue data structure of the RT scheduling class:
   */
  struct rt_prio_array {
          DECLARE_BITMAP(bitmap, MAX_RT_PRIO+1); /* include 1 bit for delimiter */
          struct list_head queue[MAX_RT_PRIO];
  };
  ```
  
  ##### bitmap
  表示该优先级上是否存在RT entity（可以是直属rt_rq、也可以是task），为1表示存在。
  
  - 当向rt_rq中enqueue一个RT entity时，会将位图中该RT entity优先级对应的bit置1：
  ```
  static void __enqueue_rt_entity(struct sched_rt_entity *rt_se, unsigned int flags)
  {
          ...
          __set_bit(rt_se_prio(rt_se), array->bitmap);
          ...
  }
  ```
  - 当rt_rq中最后一个RT entity要dequeue时，会将为途中该RT entity优先级对应的bit清0：
  ```
  static void __delist_rt_entity(struct sched_rt_entity *rt_se, struct rt_prio_array *array)
  {
          ...
          if (list_empty(array->queue + rt_se_prio(rt_se)))
                  __clear_bit(rt_se_prio(rt_se), array->bitmap);
          ...
  }
  ```
  
  ##### queue
  链表头数组，每个实时优先级对应其中一项。RT entity通过`sched_rt_entity.run_list`链接到此链表中。
  
  ### 创建实时进程
'''
linesHighlighted: []
isStarred: false
isTrashed: false
